###############################################################
# Script to test the model {{ model }}
# with JModelica.
# This script will create a json file that contains translation
# and simulation information.
###############################################################

# Import the class that grabs stdout
import OutputGrabber as og

def process_with_timeout(target, timeout):
    import multiprocessing
    import time
    import copy

    manager = multiprocessing.Manager()
    return_dict = manager.dict()
    p = multiprocessing.Process(target=target, args=(0, return_dict))
    p.daemon = True
    start = time.time()
    p.start()
    if timeout > 0:
        p.join(timeout)
    else:
        p.join()

    cpu_time = time.time() - start

    error_msg = None
    if p.is_alive():
        error_msg = "Process timeout"
        p.terminate()
    elif p.exitcode != 0:
        error_msg = "Process terminated by signal {}".format(-p.exitcode)
    if error_msg is not None:
        raise RuntimeError(error_msg)

    ret = copy.copy(return_dict[0])
    ret.update({'cpu_time': cpu_time})
    return ret

def _translate(proc_num, return_dict):
  from pymodelica import compile_fmu

  try:
    # Grab the stdoutput
    out = og.OutputGrabber()
    out.start()
    fmu_name = compile_fmu("{{ model }}",
                           version="2.0",
                           compiler_log_level='warning',
                           compiler_options = {"generate_html_diagnostics" : False,
                                               "nle_solver_tol_factor": 1e-2})
    out.stop()
    # The standard output is returned as a list, with each line being an element
    return_dict[proc_num] = {'success': True, 'fmu_name': str(fmu_name), 'stdout': out.capturedtext.split('\n')}

  except Exception as e:
    return_dict[proc_num] = {'success': False,
                             'exception': '{}: {}'.format(type(e).__name__, e)}
  return

def _simulate(proc_num, return_dict):
  from pyfmi import load_fmu

  if not {{ simulate }}:
    return_dict[proc_num] = {'success': False,
                             'message': 'No simulation requested.'}
    return return_dict

  # Simulate the model
#

  try:
    fmu_name = "{{ model }}".replace(".", "_") + ".fmu"
    mod = load_fmu(fmu_name)
    x_nominal = mod.nominal_continuous_states

    opts = mod.simulate_options() #Retrieve the default options
    opts['logging'] = False
    opts['solver'] = '{{ solver }}'
    opts['ncp'] = {{ ncp }}

    rtol = {{ rtol }}

    if len(x_nominal) > 0:
      atol = rtol*x_nominal
    else:
      atol = rtol

    if opts['solver'].lower() == 'cvode':
      # Set user-specified tolerance if it is smaller than the tolerance in the .mo file
      opts['CVode_options']['external_event_detection'] = False
      opts['CVode_options']['maxh'] = (mod.get_default_experiment_stop_time()-mod.get_default_experiment_start_time())/float(opts['ncp'])
      opts['CVode_options']['iter'] = 'Newton'
      opts['CVode_options']['discr'] = 'BDF'
      opts['CVode_options']['rtol'] = rtol
      opts['CVode_options']['atol'] = atol
      opts['CVode_options']['store_event_points'] = True # True is default, set to false if many events

    opts['filter'] = {{ filter }}
    # Grab the stdoutput
    out = og.OutputGrabber()
    out.start()
    res = mod.simulate(options=opts)
    out.stop()
    start_time = res['time'][0]
    final_time = res['time'][-1]
    return_dict[proc_num] = {'success': True, 'start_time': start_time, 'final_time': final_time, 'stdout': out.capturedtext.split('\n')}

  except Exception as e:
    return_dict[proc_num] = {'success': False,
                             'exception': '{}: {}'.format(type(e).__name__, e)}
  return return_dict

def run():
    import os
    import timeit
    import json
    import traceback
    import sys

    import pymodelica
    # Increase memory
    pymodelica.environ['JVM_ARGS'] = '-Xmx4096m'

    time_out = {{ time_out }}
    model = "{{ model }}"
    result = {"model": model,
              "translation": {"success": False},
              "simulation": {"success": False}}

    # Compile model
    log_file = "{}_buildingspy.json".format(model.replace(".", "_"))
    try:
        os.remove(log_file)
    except OSError:
        pass

    try:
        ret_dic = process_with_timeout(target=_translate, timeout=time_out)
        result["translation"] = ret_dic

    except Exception as e:
        result["translation"]["exception"] = "{}: {}".format(type(e).__name__, e)
        result["translation"]["traceback"] = traceback.format_exc()

    # Load model if translation was successful
    if result["translation"]["success"]:
        try:
            ret_dic = process_with_timeout(target=_simulate, timeout=time_out)
            result["simulation"] = ret_dic

        except Exception as e:
            result["simulation"]["exception"] = "{}: {}".format(type(e).__name__, e)
            result["simulation"]["traceback"] = traceback.format_exc()

    with open(log_file, "w") as log:
            log.write("{}\n".format(json.dumps(result, indent=4, sort_keys=False)) )

if __name__=="__main__":
    run()
