def _add_exception(return_dict, e):
  return_dict['success'] = False
  return_dict['exception'] = '{}: {}'.format(type(e).__name__, e)

def _run_process(return_dict, cmd, worDir):
  import subprocess

  output = subprocess.check_output(
    cmd,
    cwd = worDir,
    timeout={{ time_out }},
    stderr=subprocess.STDOUT,
    shell=False)

  return_dict['success'] = True
  return_dict['stdout'] = str(output)
  return output

def _translate(model):
  import subprocess
  return_dict = {}

  # Simulate the model
  try:
    worDir = "{{ working_directory }}"
    scr_nam = f"{model}.mos"
    with open(scr_nam, 'w') as f:
        f.write(f"""
setCommandLineOptions("-d=nogen");
setCommandLineOptions("-d=initialization");
setCommandLineOptions("-d=backenddaeinfo");
setCommandLineOptions("-d=discreteinfo");
setCommandLineOptions("-d=stateselection");
//setCommandLineOptions("-solver=cvode");
//setCommandLineOptions("-d=execstat");
setMatchingAlgorithm("PFPlusExt");
setIndexReductionMethod("dynamicStateSelection");
loadFile("{{ library_name }}/package.mo");
translateModel({model}, method="{{ solver }}", tolerance={{ rtol }}, numberOfIntervals={{ ncp }}, variableFilter="{{ filter }}");
getErrorString();
""")

    # Translate model
    cmd = ["omc", scr_nam]
    return_dict['cmd'] = ' '.join(cmd)
    output = _run_process(return_dict, cmd, worDir)

    # Compile model
    cmd = ["make", "-f", f"{model}.makefile"]
    return_dict['cmd'] += ' && ' + ' '.join(cmd)
    output += _run_process(return_dict, cmd, worDir)

  except (subprocess.CalledProcessError, Exception) as e:
    _add_exception(return_dict, e)
  return return_dict

def _simulate(model):
  import os
  import subprocess

  return_dict = {}

  try:
    # Simulate the model
    worDir = "{{ working_directory }}"
    cmd = [f'./{model}', '-s', '{{ solver }}', '-steps', '-cpu', '-lv', 'LOG_STATS']
    return_dict['cmd'] = ' '.join(cmd)
    output = _run_process(return_dict, cmd, worDir)

  except (subprocess.CalledProcessError, Exception) as e:
    _add_exception(return_dict, e)

  return return_dict

def _delete_files():
  import os
  import glob
  model = "{{ model }}"
  for filename in glob.glob('*.[cho]'):
    os.remove(filename)
  for filename in [f"{model}_prof.intdata", f"{model}_prof.realdata"]:
    if os.path.exists(filename):
      os.remove(filename)

def run():
  import os
  import json
  import traceback
  import sys

  time_out = 300
  model = "{{ model }}"
  result = {"model": model,
            "working_directory": "{{ working_directory }}",
            "translation": {"success": False},
            "simulation": {"success": False}}

  # Log file
  log_file = "{}_buildingspy.json".format(model.replace(".", "_"))
  try:
    os.remove(log_file)
  except OSError:
    pass

  try:
    result["translation"] = _translate(model = model)

  except Exception as e:
    msg = "{}: {}".format(type(e).__name__, str(e))
    if msg == "RuntimeError: Process timeout":
        msg = msg + " after {} seconds".format(time_out)
    result["translation"]["exception"] = msg
    result["translation"]["traceback"] = traceback.format_exc()

  if {{ simulate }}:
    if result["translation"]["success"]:
      # Simulate model
      result["simulation"] = _simulate(model = model)
    else:
      result["simulation"]["message"] = "Simulation skipped because translation failed."
  else:
    result["simulation"]["message"] = "No simulation requested."

  with open(log_file, "w") as log:
    log.write("{}\n".format(json.dumps(result, indent=4, sort_keys=False)) )

  _delete_files()

if __name__=="__main__":
  run()